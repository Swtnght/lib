#!/usr/bin/env groovy

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π pipeline –¥–ª—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Maven, Gradle –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏
 */

def call(Map config = [:]) {
    def defaultConfig = [
        buildTool: 'maven',
        buildCommand: 'clean install',
        testCommand: 'test',
        skipTests: false,
        parallel: false,
        timeout: 30,
        nodeLabel: 'linux',
        notifySlack: true,
        notifyEmail: false,
        emailRecipients: '',
        archiveArtifacts: true,
        artifactPattern: '**/target/*.jar,**/build/libs/*.jar',
        junitPattern: '**/target/surefire-reports/*.xml,**/build/test-results/**/*.xml'
    ]
    
    config = defaultConfig + config
    
    pipeline {
        agent { label config.nodeLabel }
        
        options {
            timeout(time: config.timeout, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
        }
        
        environment {
            BUILD_TOOL = config.buildTool
            BUILD_COMMAND = config.buildCommand
            TEST_COMMAND = config.testCommand
            SKIP_TESTS = config.skipTests
        }
        
        stages {
            stage('Checkout') {
                steps {
                    script {
                        echo "üîç –ù–∞—á–∏–Ω–∞–µ–º checkout –∫–æ–¥–∞..."
                        checkout scm
                        sh 'git log --oneline -5'
                    }
                }
            }
            
            stage('Setup Environment') {
                steps {
                    script {
                        echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
                        setupBuildEnvironment(config)
                    }
                }
            }
            
            stage('Dependencies') {
                steps {
                    script {
                        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
                        installDependencies(config)
                    }
                }
            }
            
            stage('Tests') {
                when {
                    not { expression { config.skipTests } }
                }
                steps {
                    script {
                        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
                        runTests(config)
                    }
                }
                post {
                    always {
                        script {
                            publishTestResults(config)
                        }
                    }
                }
            }
            
            stage('Build') {
                steps {
                    script {
                        echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
                        buildProject(config)
                    }
                }
            }
            
            stage('Quality Gate') {
                when {
                    not { expression { config.skipTests } }
                }
                steps {
                    script {
                        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞..."
                        runQualityChecks(config)
                    }
                }
            }
            
            stage('Package') {
                steps {
                    script {
                        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
                        packageArtifacts(config)
                    }
                }
                post {
                    success {
                        script {
                            if (config.archiveArtifacts) {
                                archiveArtifacts artifacts: config.artifactPattern, fingerprint: true
                            }
                        }
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
                    cleanWs()
                }
            }
            success {
                script {
                    echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                    if (config.notifySlack) {
                        notifySlack('success', config)
                    }
                    if (config.notifyEmail) {
                        notifyEmail('success', config)
                    }
                }
            }
            failure {
                script {
                    echo "‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π!"
                    if (config.notifySlack) {
                        notifySlack('failure', config)
                    }
                    if (config.notifyEmail) {
                        notifyEmail('failure', config)
                    }
                }
            }
            unstable {
                script {
                    echo "‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ!"
                    if (config.notifySlack) {
                        notifySlack('unstable', config)
                    }
                    if (config.notifyEmail) {
                        notifyEmail('unstable', config)
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def setupBuildEnvironment(config) {
    switch(config.buildTool.toLowerCase()) {
        case 'maven':
            sh 'mvn --version'
            break
        case 'gradle':
            sh 'gradle --version'
            break
        default:
            error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–±–æ—Ä–∫–∏: ${config.buildTool}"
    }
}

def installDependencies(config) {
    switch(config.buildTool.toLowerCase()) {
        case 'maven':
            sh "mvn dependency:resolve"
            break
        case 'gradle':
            sh "gradle dependencies"
            break
    }
}

def runTests(config) {
    switch(config.buildTool.toLowerCase()) {
        case 'maven':
            sh "mvn ${config.testCommand}"
            break
        case 'gradle':
            sh "gradle ${config.testCommand}"
            break
    }
}

def buildProject(config) {
    switch(config.buildTool.toLowerCase()) {
        case 'maven':
            sh "mvn ${config.buildCommand}"
            break
        case 'gradle':
            sh "gradle ${config.buildCommand}"
            break
    }
}

def runQualityChecks(config) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SonarQube, Checkstyle –∏ –¥—Ä—É–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

def packageArtifacts(config) {
    echo "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —É–ø–∞–∫–æ–≤–∞–Ω—ã"
}

def publishTestResults(config) {
    try {
        junit testResults: config.junitPattern, allowEmptyResults: true
    } catch (Exception e) {
        echo "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤: ${e.getMessage()}"
    }
}

def notifySlack(status, config) {
    def colors = getColors()
    def message = ""
    
    switch(status) {
        case 'success':
            message = "${colors.green}‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞!${colors.reset}"
            break
        case 'failure':
            message = "${colors.red}‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!${colors.reset}"
            break
        case 'unstable':
            message = "${colors.yellow}‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞!${colors.reset}"
            break
    }
    
    echo "Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message}"
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack
}

def notifyEmail(status, config) {
    if (config.emailRecipients) {
        echo "Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${config.emailRecipients}"
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
    }
} 