#!/usr/bin/env groovy

/**
 * Pipeline –¥–ª—è —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–æ–≤ —Å AstraLinux Orel
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */

def call(Map config = [:]) {
    def defaultConfig = [
        astraVersion: 'orel', // orel, smolensk
        baseImage: 'astra/orel:latest',
        dockerfile: 'Dockerfile.astra',
        context: '.',
        imageName: '',
        imageTag: '',
        registry: 'registry.astralinux.ru',
        namespace: 'mycompany',
        pushImage: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        scanImage: true,
        runTests: true,
        testPort: 8080,
        healthCheck: true,
        healthCheckUrl: 'http://localhost:8080/health',
        enableQt: false,
        qtVersion: '5.15.2',
        enableSecurity: true,
        securityScan: true,
        timeout: 45,
        nodeLabel: 'astra-linux',
        notifySlack: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        buildArgs: [:],
        multiStage: true,
        buildSystem: 'cmake', // cmake, qmake
        projectType: 'qt-app', // qt-app, qownnotes, custom
        enableTranslations: false,
        parallelJobs: 4
    ]
    
    config = defaultConfig + config
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –æ–±—Ä–∞–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if (!config.imageName) {
        config.imageName = env.JOB_NAME.toLowerCase().replaceAll(/[^a-z0-9]/, '-')
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!config.imageTag) {
        config.imageTag = "${config.astraVersion}-${env.BUILD_NUMBER}"
    }
    
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    pipeline {
        agent { label config.nodeLabel }
        
        options {
            timeout(time: config.timeout, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
        }
        
        environment {
            ASTRA_VERSION = config.astraVersion
            BASE_IMAGE = config.baseImage
            DOCKER_IMAGE = fullImageName
            DOCKERFILE = config.dockerfile
            DOCKER_CONTEXT = config.context
            QT_VERSION = config.qtVersion
            ENABLE_QT = config.enableQt
            ENABLE_SECURITY = config.enableSecurity
            BUILD_SYSTEM = config.buildSystem
            PROJECT_TYPE = config.projectType
            PARALLEL_JOBS = config.parallelJobs
        }
        
        stages {
            stage('Checkout') {
                steps {
                    script {
                        echo "üîç Checkout –∫–æ–¥–∞ –¥–ª—è AstraLinux ${config.astraVersion}..."
                        checkout scm
                        sh 'git log --oneline -5'
                    }
                }
                post {
                    success {
                        script {
                            if (config.projectType == 'qownnotes') {
                                echo "üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QOwnNotes –ø—Ä–æ–µ–∫—Ç–∞..."
                                prepareQOwnNotesProject(config)
                            }
                        }
                    }
                }
            }
            
            stage('Validate AstraLinux Environment') {
                steps {
                    script {
                        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è AstraLinux..."
                        validateAstraLinuxEnvironment(config)
                    }
                }
            }
            
            stage('Generate Dockerfile') {
                steps {
                    script {
                        echo "üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Dockerfile –¥–ª—è AstraLinux..."
                        generateAstraLinuxDockerfile(config)
                    }
                }
            }
            
            stage('Docker Build') {
                steps {
                    script {
                        echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ AstraLinux: ${fullImageName}"
                        buildAstraLinuxImage(config)
                    }
                }
            }
            
            stage('Security Scan') {
                when {
                    expression { config.securityScan }
                }
                steps {
                    script {
                        echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ AstraLinux..."
                        scanAstraLinuxImage(config)
                    }
                }
            }
            
            stage('AstraLinux Test') {
                when {
                    expression { config.runTests }
                }
                steps {
                    script {
                        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ AstraLinux..."
                        testAstraLinuxImage(config)
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    echo "üßπ –û—á–∏—Å—Ç–∫–∞ AstraLinux —Ä–µ—Å—É—Ä—Å–æ–≤..."
                    cleanupAstraLinuxResources(config)
                }
            }
            success {
                script {
                    echo "‚úÖ AstraLinux pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    echo "üì¶ –û–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${fullImageName}"
                }
            }
            failure {
                script {
                    echo "‚ùå AstraLinux pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!"
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def prepareQOwnNotesProject(config) {
    try {
        echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QOwnNotes –ø—Ä–æ–µ–∫—Ç–∞..."
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .pro —Ñ–∞–π–ª–∞
        if (fileExists('src/QOwnNotes.pro')) {
            echo "‚úÖ QOwnNotes.pro –Ω–∞–π–¥–µ–Ω –≤ src/"
        } else if (fileExists('QOwnNotes.pro')) {
            echo "‚úÖ QOwnNotes.pro –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ"
        } else {
            echo "‚ö†Ô∏è QOwnNotes.pro –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–µ QOwnNotes –ø—Ä–æ–µ–∫—Ç"
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git submodules
        if (fileExists('.gitmodules')) {
            echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ git submodules..."
            sh 'git submodule update --init --recursive'
        }
        
        echo "‚úÖ QOwnNotes –ø—Ä–æ–µ–∫—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ QOwnNotes –ø—Ä–æ–µ–∫—Ç–∞: ${e.getMessage()}"
    }
}

def validateAstraLinuxEnvironment(config) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ AstraLinux
        sh "docker pull ${config.baseImage}"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é AstraLinux
        sh """
            docker run --rm ${config.baseImage} cat /etc/os-release | grep -i astra
        """
        
        echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ AstraLinux ${config.astraVersion} –≤–∞–ª–∏–¥–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è AstraLinux: ${e.getMessage()}"
    }
}

def generateAstraLinuxDockerfile(config) {
    try {
        def dockerfileContent = generateDockerfileContent(config)
        writeFile file: config.dockerfile, text: dockerfileContent
        
        echo "‚úÖ Dockerfile –¥–ª—è AstraLinux ${config.astraVersion} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Dockerfile: ${e.getMessage()}"
    }
}

def generateDockerfileContent(config) {
    def content = ""
    
    if (config.multiStage) {
        content += """
# –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è AstraLinux ${config.astraVersion}
FROM ${config.baseImage} as builder

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    build-essential \\
    cmake \\
    git \\
    pkg-config \\
    wget \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

"""
        
        if (config.enableQt) {
            content += """
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt ${config.qtVersion}
RUN apt-get update && apt-get install -y \\
    qt5-default \\
    qtbase5-dev \\
    qtchooser \\
    qt5-qmake \\
    qtbase5-dev-tools \\
    libqt5svg5-dev \\
    libqt5webkit5-dev \\
    qtwebsockets5-dev \\
    && rm -rf /var/lib/apt/lists/*

"""
        }
        
        content += """
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
WORKDIR /app
COPY . .

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
"""
        
        if (config.projectType == 'qownnotes') {
            content += """
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QOwnNotes
RUN git submodule update --init --recursive || echo "No submodules found"
"""
        }
        
        content += """
# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
        
        if (config.buildSystem == 'qmake') {
            content += """
RUN cd src && \\
    lrelease QOwnNotes.pro && \\
    qmake && \\
    make -j${config.parallelJobs}
"""
        } else {
            content += """
RUN mkdir -p build && cd build && \\
    cmake .. && \\
    make -j${config.parallelJobs}
"""
        }
        
        content += """
# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM ${config.baseImage} as runtime

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ runtime –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    ca-certificates \\
    && rm -rf /var/lib/apt/lists/*

"""
        
        if (config.enableQt) {
            content += """
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt runtime
RUN apt-get update && apt-get install -y \\
    libqt5core5a \\
    libqt5gui5 \\
    libqt5widgets5 \\
    libqt5network5 \\
    libqt5websockets5 \\
    && rm -rf /var/lib/apt/lists/*

"""
        }
        
        content += """
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
        
        if (config.buildSystem == 'qmake') {
            content += """
COPY --from=builder /app/src/QOwnNotes /usr/local/bin/
COPY --from=builder /app/src/translations /usr/local/share/QOwnNotes/translations/
"""
        } else {
            content += """
COPY --from=builder /app/build/app /usr/local/bin/
COPY --from=builder /app/build/lib*.so* /usr/local/lib/
"""
        }
        
        content += """
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN useradd -m -s /bin/bash appuser
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f ${config.healthCheckUrl} || exit 1

EXPOSE ${config.testPort}
"""
        
        if (config.projectType == 'qownnotes') {
            content += """CMD ["/usr/local/bin/QOwnNotes"]"""
        } else {
            content += """CMD ["/usr/local/bin/app"]"""
        }
        
    } else {
        content += """
# –û–¥–Ω–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è AstraLinux ${config.astraVersion}
FROM ${config.baseImage}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    build-essential \\
    cmake \\
    git \\
    pkg-config \\
    wget \\
    curl \\
    ca-certificates \\
    && rm -rf /var/lib/apt/lists/*

"""
        
        if (config.enableQt) {
            content += """
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt ${config.qtVersion}
RUN apt-get update && apt-get install -y \\
    qt5-default \\
    qtbase5-dev \\
    qtchooser \\
    qt5-qmake \\
    qtbase5-dev-tools \\
    libqt5svg5-dev \\
    libqt5webkit5-dev \\
    qtwebsockets5-dev \\
    libqt5core5a \\
    libqt5gui5 \\
    libqt5widgets5 \\
    libqt5network5 \\
    libqt5websockets5 \\
    && rm -rf /var/lib/apt/lists/*

"""
        }
        
        content += """
# –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
WORKDIR /app

# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . .

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
"""
        
        if (config.projectType == 'qownnotes') {
            content += """
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QOwnNotes
RUN git submodule update --init --recursive || echo "No submodules found"
"""
        }
        
        content += """
# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""
        
        if (config.buildSystem == 'qmake') {
            content += """
RUN cd src && \\
    lrelease QOwnNotes.pro && \\
    qmake && \\
    make -j${config.parallelJobs} && \\
    make install
"""
        } else {
            content += """
RUN mkdir -p build && cd build && \\
    cmake .. && \\
    make -j${config.parallelJobs} && \\
    make install
"""
        }
        
        content += """
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN useradd -m -s /bin/bash appuser
USER appuser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\
    CMD curl -f ${config.healthCheckUrl} || exit 1

EXPOSE ${config.testPort}
"""
        
        if (config.projectType == 'qownnotes') {
            content += """CMD ["/usr/local/bin/QOwnNotes"]"""
        } else {
            content += """CMD ["/usr/local/bin/app"]"""
        }
    }
    
    return content
}

def buildAstraLinuxImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–±–æ—Ä–∫–∏
        def buildArgs = []
        config.buildArgs.each { key, value ->
            buildArgs.add("--build-arg ${key}=${value}")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è AstraLinux
        buildArgs.add("--build-arg ASTRA_VERSION=${config.astraVersion}")
        buildArgs.add("--build-arg QT_VERSION=${config.qtVersion}")
        buildArgs.add("--build-arg ENABLE_QT=${config.enableQt}")
        buildArgs.add("--build-arg BUILD_SYSTEM=${config.buildSystem}")
        buildArgs.add("--build-arg PROJECT_TYPE=${config.projectType}")
        buildArgs.add("--build-arg PARALLEL_JOBS=${config.parallelJobs}")
        
        def buildCommand = """
            docker build \\
                -f ${config.dockerfile} \\
                -t ${fullImageName} \\
                ${buildArgs.join(' ')} \\
                ${config.context}
        """
        
        sh buildCommand
        
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ AstraLinux —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω: ${fullImageName}"
        echo "üì¶ –û–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞ AstraLinux: ${e.getMessage()}"
    }
}

def scanAstraLinuxImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ AstraLinux ${fullImageName} –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –ø–∞–∫–µ—Ç–∞—Ö
        sh """
            docker run --rm ${fullImageName} \\
            bash -c 'apt-get update && apt-get install -y apt-show-versions && apt-show-versions | grep -i security'
        """
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
        sh """
            docker run --rm ${fullImageName} \\
            find / -type f -executable -exec file {} \\; | grep -i "executable"
        """
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ—Ä—Ç—ã
        sh """
            docker run --rm ${fullImageName} \\
            netstat -tuln || echo "netstat not available"
        """
        
        echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AstraLinux –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${e.getMessage()}"
    }
}

def testAstraLinuxImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    def containerName = "test-astra-${config.imageName}-${config.imageTag}"
    
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        sh "docker run -d --name ${containerName} -p ${config.testPort}:${config.testPort} ${fullImageName}"
        
        // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        sleep(15)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é AstraLinux –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        sh """
            docker exec ${containerName} cat /etc/os-release | grep -i astra
        """
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (config.projectType == 'qownnotes') {
            sh """
                docker exec ${containerName} ls -la /usr/local/bin/QOwnNotes
            """
        } else {
            sh """
                docker exec ${containerName} ls -la /usr/local/bin/app
            """
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if (config.healthCheck) {
            def healthStatus = sh(
                script: "curl -f ${config.healthCheckUrl} || echo 'HEALTH_CHECK_FAILED'",
                returnStdout: true
            ).trim()
            
            if (healthStatus == 'HEALTH_CHECK_FAILED') {
                error "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ AstraLinux –Ω–µ –ø—Ä–æ—à–ª–∞"
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        sh """
            docker exec ${containerName} ps aux
        """
        
        echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ AstraLinux –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–∑–∞ AstraLinux: ${e.getMessage()}"
    } finally {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        sh "docker stop ${containerName} || true"
        sh "docker rm ${containerName} || true"
    }
}

def cleanupAstraLinuxResources(config) {
    try {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã AstraLinux (–∫—Ä–æ–º–µ –Ω–∞—à–µ–≥–æ)
        sh "docker image prune -f"
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        sh "docker container prune -f"
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
        sh "docker network prune -f"
        
        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        sh "rm -f ${config.dockerfile} || true"
        
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ AstraLinux –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã AstraLinux: ${e.getMessage()}"
    }
} 