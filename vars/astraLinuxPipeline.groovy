#!/usr/bin/env groovy

import com.company.utils.AstraLinuxUtils
import com.company.utils.CommonUtils

def call(Map config = [:]) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Ç–∏–ª–∏—Ç
    def commonUtils = new CommonUtils(this)
    def astraUtils = new AstraLinuxUtils(this)
    
    // –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    def mergedConfig = commonUtils.mergeConfig(config)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    def requiredFields = ['astraVersion', 'baseImage']
    commonUtils.validateConfig(mergedConfig, requiredFields)
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –æ–±—Ä–∞–∑–∞
    def fullImageName = commonUtils.generateImageName(mergedConfig)
    mergedConfig.imageName = fullImageName
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ pipeline
    commonUtils.logPipelineInfo(mergedConfig)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    commonUtils.checkRequiredTools()
    
    pipeline {
        agent any
        
        environment {
            ASTRA_VERSION = "${mergedConfig.astraVersion}"
            BASE_IMAGE = "${mergedConfig.baseImage}"
            DOCKER_IMAGE = "${fullImageName}"
            DOCKERFILE = "${mergedConfig.dockerfile}"
            DOCKER_CONTEXT = "${mergedConfig.context}"
            QT_VERSION = "${mergedConfig.qtVersion}"
            ENABLE_QT = "${mergedConfig.enableQt}"
            ENABLE_SECURITY = "${mergedConfig.enableSecurity}"
            BUILD_SYSTEM = "${mergedConfig.buildSystem}"
            PROJECT_TYPE = "${mergedConfig.projectType}"
            PARALLEL_JOBS = "${mergedConfig.parallelJobs}"
        }
        
        stages {
            stage('Checkout') {
                steps {
                    script {
                        echo "üîç Checkout –∫–æ–¥–∞ –¥–ª—è AstraLinux ${mergedConfig.astraVersion}..."
                        checkout scm
                        sh 'git log --oneline -5'
                    }
                }
                post {
                    success {
                        script {
                            if (mergedConfig.projectType == 'qownnotes') {
                                astraUtils.prepareQOwnNotesProject(mergedConfig)
                            }
                        }
                    }
                }
            }
            
            stage('Validate AstraLinux Environment') {
                steps {
                    script {
                        astraUtils.validateAstraLinuxEnvironment(mergedConfig)
                    }
                }
            }
            
            stage('Generate Dockerfile') {
                steps {
                    script {
                        astraUtils.generateAstraLinuxDockerfile(mergedConfig)
                    }
                }
            }
            
            stage('Docker Build') {
                steps {
                    script {
                        echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞ AstraLinux: ${fullImageName}"
                        astraUtils.buildAstraLinuxImage(mergedConfig)
                    }
                }
            }
            
            stage('Security Scan') {
                when {
                    expression { mergedConfig.securityScan }
                }
                steps {
                    script {
                        astraUtils.scanAstraLinuxImage(mergedConfig)
                    }
                }
            }
            
            stage('AstraLinux Test') {
                when {
                    expression { mergedConfig.runTests }
                }
                steps {
                    script {
                        astraUtils.testAstraLinuxImage(mergedConfig)
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    astraUtils.cleanupAstraLinuxResources(mergedConfig)
                }
            }
            success {
                script {
                    commonUtils.sendNotification("AstraLinux pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!", "success")
                    echo "üì¶ –û–±—Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: ${fullImageName}"
                }
            }
            failure {
                script {
                    commonUtils.sendNotification("AstraLinux pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!", "error")
                }
            }
        }
    }
} 