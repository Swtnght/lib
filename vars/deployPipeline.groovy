#!/usr/bin/env groovy

/**
 * Pipeline –¥–ª—è –¥–µ–ø–ª–æ—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ä–µ–¥—ã –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */

def call(Map config = [:]) {
    def defaultConfig = [
        environment: 'dev',
        deploymentType: 'kubernetes', // kubernetes, docker-compose, ansible
        namespace: 'default',
        replicas: 1,
        imageName: '',
        imageTag: '',
        registry: 'docker.io',
        namespace: 'mycompany',
        healthCheck: true,
        healthCheckUrl: 'http://localhost:8080/health',
        healthCheckTimeout: 300,
        rollbackOnFailure: true,
        notifySlack: true,
        notifyEmail: false,
        emailRecipients: '',
        timeout: 30,
        nodeLabel: 'deploy'
    ]
    
    config = defaultConfig + config
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –æ–±—Ä–∞–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if (!config.imageName) {
        config.imageName = env.JOB_NAME.toLowerCase().replaceAll(/[^a-z0-9]/, '-')
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!config.imageTag) {
        config.imageTag = env.BUILD_NUMBER
    }
    
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    pipeline {
        agent { label config.nodeLabel }
        
        options {
            timeout(time: config.timeout, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
        }
        
        environment {
            ENVIRONMENT = config.environment
            DEPLOYMENT_TYPE = config.deploymentType
            KUBERNETES_NAMESPACE = config.namespace
            DOCKER_IMAGE = fullImageName
        }
        
        stages {
            stage('Validate Environment') {
                steps {
                    script {
                        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
                        validateEnvironment(config)
                    }
                }
            }
            
            stage('Pre-deployment Check') {
                steps {
                    script {
                        echo "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞..."
                        preDeploymentCheck(config)
                    }
                }
            }
            
            stage('Deploy') {
                steps {
                    script {
                        echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ ${config.environment}..."
                        deployApplication(config)
                    }
                }
            }
            
            stage('Health Check') {
                when {
                    expression { config.healthCheck }
                }
                steps {
                    script {
                        echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
                        healthCheck(config)
                    }
                }
            }
            
            stage('Post-deployment Tests') {
                steps {
                    script {
                        echo "üß™ –ü–æ—Å—Ç-–¥–µ–ø–ª–æ–π —Ç–µ—Å—Ç—ã..."
                        postDeploymentTests(config)
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    echo "üìä –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ–ø–ª–æ—è..."
                    collectDeploymentStats(config)
                }
            }
            success {
                script {
                    echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    if (config.notifySlack) {
                        notifySlack('success', config)
                    }
                    if (config.notifyEmail) {
                        notifyEmail('success', config)
                    }
                }
            }
            failure {
                script {
                    echo "‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!"
                    if (config.rollbackOnFailure) {
                        echo "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç..."
                        rollbackDeployment(config)
                    }
                    if (config.notifySlack) {
                        notifySlack('failure', config)
                    }
                    if (config.notifyEmail) {
                        notifyEmail('failure', config)
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def validateEnvironment(config) {
    switch(config.deploymentType.toLowerCase()) {
        case 'kubernetes':
            validateKubernetesEnvironment(config)
            break
        case 'docker-compose':
            validateDockerComposeEnvironment(config)
            break
        case 'ansible':
            validateAnsibleEnvironment(config)
            break
        default:
            error "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–µ–ø–ª–æ—è: ${config.deploymentType}"
    }
}

def validateKubernetesEnvironment(config) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
        sh "kubectl cluster-info"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º namespace
        sh "kubectl get namespace ${config.namespace} || kubectl create namespace ${config.namespace}"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ registry
        sh "kubectl get secrets docker-registry-credentials -n ${config.namespace} || echo 'Registry credentials not found'"
        
        echo "‚úÖ Kubernetes –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ"
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Kubernetes –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${e.getMessage()}"
    }
}

def validateDockerComposeEnvironment(config) {
    try {
        sh "docker-compose --version"
        sh "docker --version"
        echo "‚úÖ Docker Compose –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ"
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Docker Compose –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${e.getMessage()}"
    }
}

def validateAnsibleEnvironment(config) {
    try {
        sh "ansible --version"
        echo "‚úÖ Ansible –æ–∫—Ä—É–∂–µ–Ω–∏–µ –≤–∞–ª–∏–¥–Ω–æ"
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Ansible –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${e.getMessage()}"
    }
}

def preDeploymentCheck(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞
        sh "docker pull ${fullImageName}"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞
        def imageSize = sh(
            script: "docker images ${fullImageName} --format '{{.Size}}'",
            returnStdout: true
        ).trim()
        
        echo "üì¶ –†–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞: ${imageSize}"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–∑–∞
        sh "docker inspect ${fullImageName}"
        
        echo "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${e.getMessage()}"
    }
}

def deployApplication(config) {
    switch(config.deploymentType.toLowerCase()) {
        case 'kubernetes':
            deployToKubernetes(config)
            break
        case 'docker-compose':
            deployWithDockerCompose(config)
            break
        case 'ansible':
            deployWithAnsible(config)
            break
    }
}

def deployToKubernetes(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –°–æ–∑–¥–∞–µ–º ConfigMap —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        sh """
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: ConfigMap
            metadata:
              name: ${config.imageName}-config
              namespace: ${config.namespace}
            data:
              ENVIRONMENT: "${config.environment}"
              VERSION: "${config.imageTag}"
            EOF
        """
        
        // –°–æ–∑–¥–∞–µ–º Deployment
        sh """
            cat <<EOF | kubectl apply -f -
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ${config.imageName}
              namespace: ${config.namespace}
            spec:
              replicas: ${config.replicas}
              selector:
                matchLabels:
                  app: ${config.imageName}
              template:
                metadata:
                  labels:
                    app: ${config.imageName}
                spec:
                  containers:
                  - name: ${config.imageName}
                    image: ${fullImageName}
                    ports:
                    - containerPort: 8080
                    envFrom:
                    - configMapRef:
                        name: ${config.imageName}-config
                    livenessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 30
                      periodSeconds: 10
                    readinessProbe:
                      httpGet:
                        path: /health
                        port: 8080
                      initialDelaySeconds: 5
                      periodSeconds: 5
            EOF
        """
        
        // –°–æ–∑–¥–∞–µ–º Service
        sh """
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Service
            metadata:
              name: ${config.imageName}-service
              namespace: ${config.namespace}
            spec:
              selector:
                app: ${config.imageName}
              ports:
              - protocol: TCP
                port: 80
                targetPort: 8080
              type: ClusterIP
            EOF
        """
        
        // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–¥–æ–≤
        sh "kubectl rollout status deployment/${config.imageName} -n ${config.namespace} --timeout=300s"
        
        echo "‚úÖ –î–µ–ø–ª–æ–π –≤ Kubernetes –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ Kubernetes: ${e.getMessage()}"
    }
}

def deployWithDockerCompose(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –°–æ–∑–¥–∞–µ–º docker-compose.yml
        writeFile file: 'docker-compose.yml', text: """
version: '3.8'
services:
  ${config.imageName}:
    image: ${fullImageName}
    container_name: ${config.imageName}
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=${config.environment}
      - VERSION=${config.imageTag}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
"""
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
        sh "docker-compose up -d"
        
        echo "‚úÖ –î–µ–ø–ª–æ–π —Å Docker Compose –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è —Å Docker Compose: ${e.getMessage()}"
    }
}

def deployWithAnsible(config) {
    try {
        // –°–æ–∑–¥–∞–µ–º inventory —Ñ–∞–π–ª
        writeFile file: 'inventory.yml', text: """
all:
  hosts:
    ${config.environment}-servers:
      ansible_host: ${config.environment}.example.com
      ansible_user: deploy
      ansible_ssh_private_key_file: ~/.ssh/id_rsa
"""
        
        // –°–æ–∑–¥–∞–µ–º playbook
        writeFile file: 'deploy.yml', text: """
---
- hosts: ${config.environment}-servers
  become: yes
  tasks:
    - name: Pull Docker image
      docker_image:
        name: ${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}
        source: pull
        
    - name: Stop existing container
      docker_container:
        name: ${config.imageName}
        state: absent
        
    - name: Start new container
      docker_container:
        name: ${config.imageName}
        image: ${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}
        state: started
        ports:
          - "8080:8080"
        env:
          ENVIRONMENT: "${config.environment}"
          VERSION: "${config.imageTag}"
"""
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º playbook
        sh "ansible-playbook -i inventory.yml deploy.yml"
        
        echo "‚úÖ –î–µ–ø–ª–æ–π —Å Ansible –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è —Å Ansible: ${e.getMessage()}"
    }
}

def healthCheck(config) {
    def healthUrl = config.healthCheckUrl
    
    try {
        def timeout = config.healthCheckTimeout
        def interval = 10
        def attempts = timeout / interval
        
        for (int i = 0; i < attempts; i++) {
            try {
                def response = sh(
                    script: "curl -f -s ${healthUrl}",
                    returnStdout: true
                ).trim()
                
                if (response) {
                    echo "‚úÖ Health check –ø—Ä–æ–π–¥–µ–Ω: ${response}"
                    return
                }
            } catch (Exception e) {
                echo "‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${attempts}: Health check –Ω–µ –ø—Ä–æ—à–µ–ª, –∂–¥–µ–º ${interval} —Å–µ–∫—É–Ω–¥..."
                sleep(interval)
            }
        }
        
        error "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ ${timeout} —Å–µ–∫—É–Ω–¥"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ health check: ${e.getMessage()}"
    }
}

def postDeploymentTests(config) {
    try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
        echo "üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤..."
        
        // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        sh "curl -f http://localhost:8080/api/health || echo 'API health check failed'"
        
        echo "‚úÖ –ü–æ—Å—Ç-–¥–µ–ø–ª–æ–π —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç-–¥–µ–ø–ª–æ–π —Ç–µ—Å—Ç–∞—Ö: ${e.getMessage()}"
    }
}

def rollbackDeployment(config) {
    try {
        switch(config.deploymentType.toLowerCase()) {
            case 'kubernetes':
                sh "kubectl rollout undo deployment/${config.imageName} -n ${config.namespace}"
                sh "kubectl rollout status deployment/${config.imageName} -n ${config.namespace}"
                break
            case 'docker-compose':
                sh "docker-compose down"
                sh "docker-compose up -d"
                break
            case 'ansible':
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–∫–∞—Ç–∞ –¥–ª—è Ansible
                echo "–û—Ç–∫–∞—Ç –¥–ª—è Ansible –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"
                break
        }
        
        echo "‚úÖ –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ: ${e.getMessage()}"
    }
}

def collectDeploymentStats(config) {
    try {
        def stats = [
            environment: config.environment,
            deploymentType: config.deploymentType,
            imageName: config.imageName,
            imageTag: config.imageTag,
            timestamp: new Date().toString(),
            buildNumber: env.BUILD_NUMBER,
            jobName: env.JOB_NAME
        ]
        
        writeJSON file: "deployment-stats-${env.BUILD_NUMBER}.json", json: stats
        
        echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–ø–ª–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: ${e.getMessage()}"
    }
}

def notifySlack(status, config) {
    def colors = getColors()
    def message = ""
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    switch(status) {
        case 'success':
            message = "${colors.green}‚úÖ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω –≤ ${config.environment}: ${fullImageName}${colors.reset}"
            break
        case 'failure':
            message = "${colors.red}‚ùå –î–µ–ø–ª–æ–π –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –≤ ${config.environment}: ${fullImageName}${colors.reset}"
            break
    }
    
    echo "Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message}"
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack
}

def notifyEmail(status, config) {
    if (config.emailRecipients) {
        echo "Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: ${config.emailRecipients}"
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É email
    }
} 