#!/usr/bin/env groovy

/**
 * Pipeline –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
 * –í–∫–ª—é—á–∞–µ—Ç —Å–±–æ—Ä–∫—É, —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–±—Ä–∞–∑–æ–≤
 */

def call(Map config = [:]) {
    def defaultConfig = [
        dockerfile: 'Dockerfile',
        context: '.',
        imageName: '',
        imageTag: '',
        registry: 'docker.io',
        namespace: 'mycompany',
        pushImage: true,
        scanImage: true,
        runTests: true,
        testPort: 8080,
        healthCheck: true,
        healthCheckUrl: 'http://localhost:8080/health',
        timeout: 20,
        nodeLabel: 'docker',
        notifySlack: true
    ]
    
    config = defaultConfig + config
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –æ–±—Ä–∞–∑–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
    if (!config.imageName) {
        config.imageName = env.JOB_NAME.toLowerCase().replaceAll(/[^a-z0-9]/, '-')
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if (!config.imageTag) {
        config.imageTag = env.BUILD_NUMBER
    }
    
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    pipeline {
        agent { label config.nodeLabel }
        
        options {
            timeout(time: config.timeout, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
        }
        
        environment {
            DOCKER_IMAGE = fullImageName
            DOCKERFILE = config.dockerfile
            DOCKER_CONTEXT = config.context
        }
        
        stages {
            stage('Checkout') {
                steps {
                    script {
                        echo "üîç Checkout –∫–æ–¥–∞..."
                        checkout scm
                    }
                }
            }
            
            stage('Docker Build') {
                steps {
                    script {
                        echo "üê≥ –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞: ${fullImageName}"
                        buildDockerImage(config)
                    }
                }
            }
            
            stage('Docker Test') {
                when {
                    expression { config.runTests }
                }
                steps {
                    script {
                        echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞..."
                        testDockerImage(config)
                    }
                }
            }
            
            stage('Security Scan') {
                when {
                    expression { config.scanImage }
                }
                steps {
                    script {
                        echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞..."
                        scanDockerImage(config)
                    }
                }
            }
            
            stage('Push Image') {
                when {
                    expression { config.pushImage }
                }
                steps {
                    script {
                        echo "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–±—Ä–∞–∑–∞ –≤ registry..."
                        pushDockerImage(config)
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
                    cleanupDockerResources(config)
                }
            }
            success {
                script {
                    echo "‚úÖ Docker pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    if (config.notifySlack) {
                        notifySlack('success', config)
                    }
                }
            }
            failure {
                script {
                    echo "‚ùå Docker pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!"
                    if (config.notifySlack) {
                        notifySlack('failure', config)
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def buildDockerImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        sh """
            docker build \
                -f ${config.dockerfile} \
                -t ${fullImageName} \
                ${config.context}
        """
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω: ${fullImageName}"
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ Docker –æ–±—Ä–∞–∑–∞: ${e.getMessage()}"
    }
}

def testDockerImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    def containerName = "test-${config.imageName}-${config.imageTag}"
    
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        sh "docker run -d --name ${containerName} -p ${config.testPort}:${config.testPort} ${fullImageName}"
        
        // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        sleep(10)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        if (config.healthCheck) {
            def healthStatus = sh(
                script: "curl -f ${config.healthCheckUrl} || echo 'HEALTH_CHECK_FAILED'",
                returnStdout: true
            ).trim()
            
            if (healthStatus == 'HEALTH_CHECK_FAILED') {
                error "‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–ª–∞"
            }
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        sh "docker exec ${containerName} sh -c 'echo \"Running container tests...\"'"
        
        echo "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –æ–±—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Docker –æ–±—Ä–∞–∑–∞: ${e.getMessage()}"
    } finally {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        sh "docker stop ${containerName} || true"
        sh "docker rm ${containerName} || true"
    }
}

def scanDockerImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Trivy, Clair –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ —Å–∫–∞–Ω–µ—Ä–∞–º–∏
        echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ ${fullImageName} –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
        
        // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Trivy (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        // sh "trivy image --severity HIGH,CRITICAL ${fullImageName}"
        
        echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${e.getMessage()}"
    }
}

def pushDockerImage(config) {
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    try {
        // –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ registry –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (config.registry != 'docker.io') {
            withCredentials([usernamePassword(credentialsId: 'docker-registry-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                sh "echo \$DOCKER_PASS | docker login ${config.registry} -u \$DOCKER_USER --password-stdin"
            }
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º –æ–±—Ä–∞–∑
        sh "docker push ${fullImageName}"
        
        echo "‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${fullImageName}"
        
        // –°–æ–∑–¥–∞–µ–º latest —Ç–µ–≥ –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ª–∏–∑
        if (config.imageTag == 'latest' || config.imageTag.matches(/^v?\d+\.\d+\.\d+/)) {
            def latestTag = "${config.registry}/${config.namespace}/${config.imageName}:latest"
            sh "docker tag ${fullImageName} ${latestTag}"
            sh "docker push ${latestTag}"
            echo "‚úÖ Latest —Ç–µ–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${latestTag}"
        }
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Docker –æ–±—Ä–∞–∑–∞: ${e.getMessage()}"
    }
}

def cleanupDockerResources(config) {
    try {
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –æ–±—Ä–∞–∑—ã
        sh "docker image prune -f"
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        sh "docker container prune -f"
        
        // –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–µ—Ç–∏
        sh "docker network prune -f"
        
        echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å Docker —Ä–µ—Å—É—Ä—Å—ã: ${e.getMessage()}"
    }
}

def notifySlack(status, config) {
    def colors = getColors()
    def message = ""
    def fullImageName = "${config.registry}/${config.namespace}/${config.imageName}:${config.imageTag}"
    
    switch(status) {
        case 'success':
            message = "${colors.green}‚úÖ Docker –æ–±—Ä–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: ${fullImageName}${colors.reset}"
            break
        case 'failure':
            message = "${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Docker –æ–±—Ä–∞–∑–æ–º: ${fullImageName}${colors.reset}"
            break
    }
    
    echo "Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message}"
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack
} 