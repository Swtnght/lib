#!/usr/bin/env groovy

/**
 * Pipeline –¥–ª—è —Å–±–æ—Ä–∫–∏ C/C++ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å CMake
 * –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –¥–ª—è CI/CD —Å CMake
 */

def call(Map config = [:]) {
    def defaultConfig = [
        buildType: 'Release', // Debug, Release, RelWithDebInfo, MinSizeRel
        buildDir: 'build',
        sourceDir: '.',
        installDir: '/usr/local',
        parallelJobs: 4,
        compiler: 'gcc', // gcc, clang, msvc
        cppStandard: '17',
        enableTests: true,
        enableCoverage: false,
        enableSanitizers: false,
        sanitizerType: 'address', // address, thread, memory, undefined
        enableStaticAnalysis: false,
        staticAnalyzer: 'cppcheck', // cppcheck, clang-tidy
        packageManager: 'conan', // conan, vcpkg, none
        conanProfile: 'default',
        vcpkgTriplet: 'x64-linux',
        crossCompile: false,
        targetPlatform: '',
        targetArch: '',
        timeout: 60,
        nodeLabel: 'linux',
        notifySlack: true,
        archiveArtifacts: true,
        artifactPattern: '**/build/**/*.so,**/build/**/*.a,**/build/**/*.exe',
        junitPattern: '**/build/**/test_results/**/*.xml'
    ]
    
    config = defaultConfig + config
    
    pipeline {
        agent { label config.nodeLabel }
        
        options {
            timeout(time: config.timeout, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
        }
        
        environment {
            BUILD_TYPE = config.buildType
            BUILD_DIR = config.buildDir
            SOURCE_DIR = config.sourceDir
            INSTALL_DIR = config.installDir
            PARALLEL_JOBS = config.parallelJobs
            COMPILER = config.compiler
            CPP_STANDARD = config.cppStandard
            ENABLE_TESTS = config.enableTests
            ENABLE_COVERAGE = config.enableCoverage
            ENABLE_SANITIZERS = config.enableSanitizers
            SANITIZER_TYPE = config.sanitizerType
            ENABLE_STATIC_ANALYSIS = config.enableStaticAnalysis
            STATIC_ANALYZER = config.staticAnalyzer
            PACKAGE_MANAGER = config.packageManager
            CONAN_PROFILE = config.conanProfile
            VCPKG_TRIPLET = config.vcpkgTriplet
        }
        
        stages {
            stage('Checkout') {
                steps {
                    script {
                        echo "üîç Checkout –∫–æ–¥–∞..."
                        checkout scm
                        sh 'git log --oneline -5'
                    }
                }
            }
            
            stage('Setup Environment') {
                steps {
                    script {
                        echo "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è CMake..."
                        setupCMakeEnvironment(config)
                    }
                }
            }
            
            stage('Install Dependencies') {
                steps {
                    script {
                        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
                        installDependencies(config)
                    }
                }
            }
            
            stage('Configure') {
                steps {
                    script {
                        echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CMake..."
                        configureCMake(config)
                    }
                }
            }
            
            stage('Static Analysis') {
                when {
                    expression { config.enableStaticAnalysis }
                }
                steps {
                    script {
                        echo "üîç –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞..."
                        runStaticAnalysis(config)
                    }
                }
            }
            
            stage('Build') {
                steps {
                    script {
                        echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
                        buildProject(config)
                    }
                }
            }
            
            stage('Test') {
                when {
                    expression { config.enableTests }
                }
                steps {
                    script {
                        echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
                        runTests(config)
                    }
                }
                post {
                    always {
                        script {
                            publishTestResults(config)
                        }
                    }
                }
            }
            
            stage('Coverage') {
                when {
                    expression { config.enableCoverage }
                }
                steps {
                    script {
                        echo "üìä –°–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞..."
                        collectCoverage(config)
                    }
                }
            }
            
            stage('Install') {
                steps {
                    script {
                        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤..."
                        installArtifacts(config)
                    }
                }
            }
            
            stage('Package') {
                steps {
                    script {
                        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
                        createPackages(config)
                    }
                }
                post {
                    success {
                        script {
                            if (config.archiveArtifacts) {
                                archiveArtifacts artifacts: config.artifactPattern, fingerprint: true
                            }
                        }
                    }
                }
            }
        }
        
        post {
            always {
                script {
                    echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞..."
                    cleanupWorkspace(config)
                }
            }
            success {
                script {
                    echo "‚úÖ CMake —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                    if (config.notifySlack) {
                        notifySlack('success', config)
                    }
                }
            }
            failure {
                script {
                    echo "‚ùå CMake —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π!"
                    if (config.notifySlack) {
                        notifySlack('failure', config)
                    }
                }
            }
        }
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def setupCMakeEnvironment(config) {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        sh 'cmake --version'
        sh 'gcc --version'
        sh 'make --version'
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞
        switch(config.compiler.toLowerCase()) {
            case 'gcc':
                env.CC = 'gcc'
                env.CXX = 'g++'
                break
            case 'clang':
                env.CC = 'clang'
                env.CXX = 'clang++'
                break
            case 'msvc':
                // –î–ª—è Windows —Å MSVC
                env.CC = 'cl'
                env.CXX = 'cl'
                break
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–±–æ—Ä–∫–∏
        sh "mkdir -p ${config.buildDir}"
        
        echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –¥–ª—è ${config.compiler}"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${e.getMessage()}"
    }
}

def installDependencies(config) {
    try {
        switch(config.packageManager.toLowerCase()) {
            case 'conan':
                installConanDependencies(config)
                break
            case 'vcpkg':
                installVcpkgDependencies(config)
                break
            case 'none':
                echo "–ü–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è"
                break
            default:
                echo "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: ${config.packageManager}"
        }
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${e.getMessage()}"
    }
}

def installConanDependencies(config) {
    try {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Conan –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        sh 'pip install conan || echo "Conan —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"'
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        sh "conan profile show ${config.conanProfile} || conan profile new ${config.conanProfile} --detect"
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if (fileExists('conanfile.txt') || fileExists('conanfile.py')) {
            sh "conan install . --build=missing --profile=${config.conanProfile}"
        }
        
        echo "‚úÖ Conan –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Conan –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${e.getMessage()}"
    }
}

def installVcpkgDependencies(config) {
    try {
        // –ö–ª–æ–Ω–∏—Ä—É–µ–º vcpkg –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!fileExists('vcpkg')) {
            sh 'git clone https://github.com/Microsoft/vcpkg.git'
            sh 'cd vcpkg && ./bootstrap-vcpkg.sh'
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ vcpkg.json
        if (fileExists('vcpkg.json')) {
            sh "./vcpkg/vcpkg install --triplet=${config.vcpkgTriplet}"
        }
        
        echo "‚úÖ Vcpkg –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Vcpkg –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${e.getMessage()}"
    }
}

def configureCMake(config) {
    try {
        def cmakeArgs = [
            "-DCMAKE_BUILD_TYPE=${config.buildType}",
            "-DCMAKE_CXX_STANDARD=${config.cppStandard}",
            "-DCMAKE_CXX_STANDARD_REQUIRED=ON",
            "-DCMAKE_INSTALL_PREFIX=${config.installDir}",
            "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        if (config.enableTests) {
            cmakeArgs.add("-DBUILD_TESTING=ON")
            cmakeArgs.add("-DENABLE_TESTING=ON")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è
        if (config.enableCoverage) {
            cmakeArgs.add("-DENABLE_COVERAGE=ON")
            cmakeArgs.add("-DCMAKE_BUILD_TYPE=Debug")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å–∞–Ω–∏—Ç–∞–π–∑–µ—Ä–æ–≤
        if (config.enableSanitizers) {
            cmakeArgs.add("-DENABLE_SANITIZERS=ON")
            cmakeArgs.add("-DSANITIZER_TYPE=${config.sanitizerType}")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        if (config.enableStaticAnalysis) {
            cmakeArgs.add("-DENABLE_STATIC_ANALYSIS=ON")
            cmakeArgs.add("-DSTATIC_ANALYZER=${config.staticAnalyzer}")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è –∫—Ä–æ—Å—Å-–∫–æ–º–ø–∏–ª—è—Ü–∏–∏
        if (config.crossCompile) {
            cmakeArgs.add("-DCMAKE_SYSTEM_NAME=${config.targetPlatform}")
            cmakeArgs.add("-DCMAKE_SYSTEM_PROCESSOR=${config.targetArch}")
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–∞–∫–µ—Ç–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
        switch(config.packageManager.toLowerCase()) {
            case 'conan':
                cmakeArgs.add("-DCMAKE_PREFIX_PATH=${pwd()}/build")
                break
            case 'vcpkg':
                cmakeArgs.add("-DCMAKE_TOOLCHAIN_FILE=${pwd()}/vcpkg/scripts/buildsystems/vcpkg.cmake")
                break
        }
        
        def cmakeCommand = "cmake ${cmakeArgs.join(' ')} ${config.sourceDir}"
        sh "cd ${config.buildDir} && ${cmakeCommand}"
        
        echo "‚úÖ CMake –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CMake: ${e.getMessage()}"
    }
}

def runStaticAnalysis(config) {
    try {
        switch(config.staticAnalyzer.toLowerCase()) {
            case 'cppcheck':
                sh "cd ${config.buildDir} && cppcheck --enable=all --xml --xml-version=2 . 2> cppcheck-result.xml || true"
                break
            case 'clang-tidy':
                sh "cd ${config.buildDir} && run-clang-tidy -j${config.parallelJobs} -header-filter='.*' -checks='*' -fix"
                break
        }
        
        echo "‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${e.getMessage()}"
    }
}

def buildProject(config) {
    try {
        sh "cd ${config.buildDir} && make -j${config.parallelJobs}"
        
        echo "‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: ${e.getMessage()}"
    }
}

def runTests(config) {
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —á–µ—Ä–µ–∑ CTest
        sh "cd ${config.buildDir} && ctest --output-on-failure --parallel ${config.parallelJobs}"
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å Google Test, –∑–∞–ø—É—Å–∫–∞–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        sh "cd ${config.buildDir} && find . -name '*_test' -executable -exec {} \\; || true"
        
        echo "‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã"
        
    } catch (Exception e) {
        error "‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: ${e.getMessage()}"
    }
}

def publishTestResults(config) {
    try {
        // –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã CTest
        step([$class: 'JUnitResultArchiver', testResults: config.junitPattern, allowEmptyResults: true])
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Google Test –µ—Å–ª–∏ –µ—Å—Ç—å
        step([$class: 'GoogleTestResultArchiver', testResultsPattern: '**/test_results/**/*.xml', allowEmptyResults: true])
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: ${e.getMessage()}"
    }
}

def collectCoverage(config) {
    try {
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º
        sh "cd ${config.buildDir} && make coverage"
        
        // –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏
        step([$class: 'CoberturaPublisher', coberturaReportFile: '**/coverage.xml'])
        
        echo "‚úÖ –°–±–æ—Ä –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–æ–∫—Ä—ã—Ç–∏—è: ${e.getMessage()}"
    }
}

def installArtifacts(config) {
    try {
        sh "cd ${config.buildDir} && make install DESTDIR=${pwd()}/install"
        
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: ${e.getMessage()}"
    }
}

def createPackages(config) {
    try {
        // –°–æ–∑–¥–∞–µ–º CPack –ø–∞–∫–µ—Ç—ã
        sh "cd ${config.buildDir} && cpack"
        
        // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞–∫–µ—Ç—ã
        archiveArtifacts artifacts: '**/build/*.tar.gz,**/build/*.deb,**/build/*.rpm,**/build/*.zip', fingerprint: true
        
        echo "‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: ${e.getMessage()}"
    }
}

def cleanupWorkspace(config) {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
        if (currentBuild.result == 'SUCCESS') {
            sh "rm -rf ${config.buildDir}/CMakeCache.txt"
            sh "rm -rf ${config.buildDir}/CMakeFiles"
        }
    } catch (Exception e) {
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: ${e.getMessage()}"
    }
}

def notifySlack(status, config) {
    def colors = getColors()
    def message = ""
    
    switch(status) {
        case 'success':
            message = "${colors.green}‚úÖ CMake —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–∞! –¢–∏–ø: ${config.buildType}, –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä: ${config.compiler}${colors.reset}"
            break
        case 'failure':
            message = "${colors.red}‚ùå CMake —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å! –¢–∏–ø: ${config.buildType}, –ö–æ–º–ø–∏–ª—è—Ç–æ—Ä: ${config.compiler}${colors.reset}"
            break
    }
    
    echo "Slack —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message}"
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack
} 