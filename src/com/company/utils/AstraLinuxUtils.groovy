package com.company.utils

class AstraLinuxUtils implements Serializable {
    def script
    
    AstraLinuxUtils(script) {
        this.script = script
    }
    
    def prepareQOwnNotesProject(config) {
        try {
            script.echo "üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ QOwnNotes –ø—Ä–æ–µ–∫—Ç–∞..."
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .pro —Ñ–∞–π–ª–∞
            if (script.fileExists('src/QOwnNotes.pro')) {
                script.echo "‚úÖ QOwnNotes.pro –Ω–∞–π–¥–µ–Ω –≤ src/"
            } else if (script.fileExists('QOwnNotes.pro')) {
                script.echo "‚úÖ QOwnNotes.pro –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ"
            } else {
                script.echo "‚ö†Ô∏è QOwnNotes.pro –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–µ QOwnNotes –ø—Ä–æ–µ–∫—Ç"
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git submodules
            if (script.fileExists('.gitmodules')) {
                script.echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ git submodules..."
                script.sh 'git submodule update --init --recursive'
            }
            
            script.echo "‚úÖ QOwnNotes –ø—Ä–æ–µ–∫—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω"
            
        } catch (Exception e) {
            script.echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ QOwnNotes –ø—Ä–æ–µ–∫—Ç–∞: ${e.getMessage()}"
        }
    }
    
    def validateAstraLinuxEnvironment(config) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞ AstraLinux
            script.sh "docker pull ${config.baseImage}"
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é AstraLinux
            script.sh """
                docker run --rm ${config.baseImage} cat /etc/os-release | grep -i astra
            """
            
            script.echo "‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ AstraLinux ${config.astraVersion} –≤–∞–ª–∏–¥–Ω–æ"
            
        } catch (Exception e) {
            script.error "‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è AstraLinux: ${e.getMessage()}"
        }
    }
    
    def generateAstraLinuxDockerfile(config) {
        try {
            def dockerfileContent = generateDockerfileContent(config)
            script.writeFile file: config.dockerfile, text: dockerfileContent
            
            script.echo "‚úÖ Dockerfile –¥–ª—è AstraLinux ${config.astraVersion} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
            
        } catch (Exception e) {
            script.error "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Dockerfile: ${e.getMessage()}"
        }
    }
    
    def generateDockerfileContent(config) {
        def content = ""
        
        if (config.multiStage) {
            content += """
# –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è AstraLinux ${config.astraVersion}
FROM ${config.baseImage} as builder

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    build-essential \\
    cmake \\
    git \\
    pkg-config \\
    wget \\
    curl \\
    && rm -rf /var/lib/apt/lists/*

"""
            
            if (config.enableQt) {
                content += """
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt ${config.qtVersion}
RUN apt-get update && apt-get install -y \\
    qt5-default \\
    qtbase5-dev \\
    qtchooser \\
    qt5-qmake \\
    qtbase5-dev-tools \\
    libqt5svg5-dev \\
    libqt5webkit5-dev \\
    qtwebsockets5-dev \\
    && rm -rf /var/lib/apt/lists/*
"""
            }
            
            content += """
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . /app
WORKDIR /app

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN cmake . && make -j${config.parallelJobs}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑
FROM ${config.baseImage}
"""
        } else {
            content += """
# –û–¥–Ω–æ—ç—Ç–∞–ø–Ω–∞—è —Å–±–æ—Ä–∫–∞ –¥–ª—è AstraLinux ${config.astraVersion}
FROM ${config.baseImage}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    build-essential \\
    cmake \\
    git \\
    pkg-config \\
    wget \\
    curl \\
    && rm -rf /var/lib/apt/lists/*
"""
            
            if (config.enableQt) {
                content += """
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Qt ${config.qtVersion}
RUN apt-get update && apt-get install -y \\
    qt5-default \\
    qtbase5-dev \\
    qtchooser \\
    qt5-qmake \\
    qtbase5-dev-tools \\
    libqt5svg5-dev \\
    libqt5webkit5-dev \\
    qtwebsockets5-dev \\
    && rm -rf /var/lib/apt/lists/*
"""
            }
            
            content += """
# –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
COPY . /app
WORKDIR /app

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
RUN cmake . && make -j${config.parallelJobs}
"""
        }
        
        if (config.enableSecurity) {
            content += """
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN apt-get update && apt-get install -y \\
    apparmor \\
    apparmor-utils \\
    && rm -rf /var/lib/apt/lists/*

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
RUN useradd -m -s /bin/bash appuser
USER appuser
"""
        }
        
        content += """
# –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Ä—Ç–æ–≤
EXPOSE 8080

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
CMD ["./app"]
"""
        
        return content
    }
    
    def buildAstraLinuxImage(config) {
        try {
            def buildArgs = ""
            if (config.buildArgs) {
                buildArgs = config.buildArgs.collect { k, v -> "--build-arg ${k}=${v}" }.join(" ")
            }
            
            script.sh """
                docker build ${buildArgs} \\
                    -f ${config.dockerfile} \\
                    -t ${config.imageName}:${config.imageTag} \\
                    ${config.context}
            """
            
            script.echo "‚úÖ Docker –æ–±—Ä–∞–∑ AstraLinux ${config.astraVersion} —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ"
            
        } catch (Exception e) {
            script.error "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ Docker –æ–±—Ä–∞–∑–∞: ${e.getMessage()}"
        }
    }
    
    def scanAstraLinuxImage(config) {
        try {
            script.echo "üîí –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–∞ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Trivy
            def trivyAvailable = script.sh(
                script: "which trivy || echo 'not_found'",
                returnStdout: true
            ).trim()
            
            if (trivyAvailable != 'not_found') {
                script.sh """
                    trivy image --severity HIGH,CRITICAL ${config.imageName}:${config.imageTag}
                """
            } else {
                script.echo "‚ö†Ô∏è Trivy –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            }
            
        } catch (Exception e) {
            script.echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${e.getMessage()}"
        }
    }
    
    def testAstraLinuxImage(config) {
        try {
            script.echo "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–∑–∞ AstraLinux..."
            
            // –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
            script.sh """
                docker run --rm ${config.imageName}:${config.imageTag} echo "–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
                docker run --rm ${config.imageName}:${config.imageTag} which cmake
                docker run --rm ${config.imageName}:${config.imageTag} which gcc
            """
            
            if (config.enableQt) {
                script.sh """
                    docker run --rm ${config.imageName}:${config.imageTag} which qmake
                    docker run --rm ${config.imageName}:${config.imageTag} which qt5-qmake
                """
            }
            
            script.echo "‚úÖ –¢–µ—Å—Ç—ã AstraLinux ${config.astraVersion} –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
            
        } catch (Exception e) {
            script.error "‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞: ${e.getMessage()}"
        }
    }
    
    def cleanupAstraLinuxResources(config) {
        try {
            script.echo "üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤..."
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
            script.sh """
                docker image prune -f || true
                docker container prune -f || true
            """
            
        } catch (Exception e) {
            script.echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${e.getMessage()}"
        }
    }
} 